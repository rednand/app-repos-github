{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"renderTextInput\", \"value\", \"onChangeText\", \"onChangeValue\", \"separator\", \"delimiter\", \"prefix\", \"suffix\", \"precision\", \"maxValue\", \"minValue\", \"signPosition\", \"showPositiveSign\"];\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nimport * as React from 'react';\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport formatNumber, { addSignPrefixAndSuffix } from \"./utils/formatNumber\";\nexport var CurrencyInput = React.forwardRef(function (props, ref) {\n  var renderTextInput = props.renderTextInput,\n    value = props.value,\n    onChangeText = props.onChangeText,\n    onChangeValue = props.onChangeValue,\n    separator = props.separator,\n    delimiter = props.delimiter,\n    _props$prefix = props.prefix,\n    prefix = _props$prefix === void 0 ? '' : _props$prefix,\n    _props$suffix = props.suffix,\n    suffix = _props$suffix === void 0 ? '' : _props$suffix,\n    _props$precision = props.precision,\n    precision = _props$precision === void 0 ? 2 : _props$precision,\n    maxValue = props.maxValue,\n    minValue = props.minValue,\n    _props$signPosition = props.signPosition,\n    signPosition = _props$signPosition === void 0 ? 'afterPrefix' : _props$signPosition,\n    showPositiveSign = props.showPositiveSign,\n    rest = _objectWithoutProperties(props, _excluded);\n  var _React$useState = React.useState(),\n    _React$useState2 = _slicedToArray(_React$useState, 2),\n    startingWithSign = _React$useState2[0],\n    setStartingWithSign = _React$useState2[1];\n  var noNegativeValues = typeof minValue === 'number' && minValue >= 0;\n  var noPositiveValues = typeof maxValue === 'number' && maxValue <= 0;\n  var formattedValue = React.useMemo(function () {\n    if (!!value || value === 0 || value === -0) {\n      return formatNumber(value, {\n        separator: separator,\n        prefix: prefix,\n        suffix: suffix,\n        precision: precision,\n        delimiter: delimiter,\n        ignoreNegative: noNegativeValues,\n        signPosition: signPosition,\n        showPositiveSign: showPositiveSign\n      });\n    } else {\n      return '';\n    }\n  }, [value, separator, prefix, suffix, precision, delimiter, noNegativeValues, signPosition, showPositiveSign]);\n  React.useEffect(function () {\n    onChangeText && onChangeText(formattedValue);\n  }, [formattedValue]);\n  var handleChangeText = React.useCallback(function (text) {\n    var textWithoutPrefix = text;\n    if (prefix) {\n      textWithoutPrefix = text.replace(prefix, '');\n      if (textWithoutPrefix === text) {\n        textWithoutPrefix = text.replace(prefix.slice(0, -1), '');\n      }\n    }\n    var textWithoutPrefixAndSufix = textWithoutPrefix;\n    if (suffix) {\n      var suffixRegex = new RegExp(\"\".concat(suffix, \"([^\").concat(suffix, \"]*)$\"));\n      textWithoutPrefixAndSufix = textWithoutPrefix.replace(suffixRegex, '');\n      if (textWithoutPrefixAndSufix === textWithoutPrefix) {\n        textWithoutPrefixAndSufix = textWithoutPrefix.replace(suffix.slice(1), '');\n      }\n    }\n    if (/^(-|-0)$/.test(text) && !noNegativeValues) {\n      setStartingWithSign('-');\n      onChangeText && onChangeText(addSignPrefixAndSuffix(formattedValue, {\n        prefix: prefix,\n        suffix: suffix,\n        sign: '-',\n        signPosition: signPosition\n      }));\n      return;\n    } else if (/^(\\+|\\+0)$/.test(text) && !noPositiveValues) {\n      setStartingWithSign('+');\n      onChangeText && onChangeText(addSignPrefixAndSuffix(formattedValue, {\n        prefix: prefix,\n        suffix: suffix,\n        sign: '+',\n        signPosition: signPosition\n      }));\n    } else {\n      setStartingWithSign(undefined);\n    }\n    var isNegativeValue = textWithoutPrefixAndSufix.includes('-');\n    var textNumericValue = textWithoutPrefixAndSufix.replace(/\\D+/g, '');\n    var numberValue = Number(textNumericValue) * (isNegativeValue ? -1 : 1);\n    var zerosOnValue = textNumericValue.replace(/[^0]/g, '').length;\n    var newValue;\n    if (!textNumericValue || !numberValue && zerosOnValue === precision) {\n      newValue = null;\n    } else {\n      newValue = numberValue / 10 ** precision;\n    }\n    if (newValue && maxValue && newValue > maxValue) {\n      return;\n    } else if (newValue && minValue && newValue < minValue) {\n      return;\n    }\n    onChangeValue && onChangeValue(newValue);\n  }, [suffix, prefix, noNegativeValues, noPositiveValues, precision, maxValue, minValue, onChangeValue, onChangeText, formattedValue, signPosition]);\n  var textInputValue = React.useMemo(function () {\n    return startingWithSign ? addSignPrefixAndSuffix(formattedValue, {\n      prefix: prefix,\n      suffix: suffix,\n      sign: startingWithSign,\n      signPosition: signPosition\n    }) : formattedValue;\n  }, [formattedValue, prefix, signPosition, startingWithSign, suffix]);\n  var nextProps = React.useMemo(function () {\n    return _objectSpread(_objectSpread({\n      keyboardType: 'numeric',\n      selection: suffix ? {\n        start: Math.max(textInputValue.length - suffix.length, 0)\n      } : props === null || props === void 0 ? void 0 : props.selection\n    }, rest), {}, {\n      value: textInputValue,\n      onChangeText: handleChangeText,\n      ref: ref\n    });\n  }, [handleChangeText, props === null || props === void 0 ? void 0 : props.selection, ref, rest, suffix, textInputValue]);\n  if (renderTextInput) {\n    return renderTextInput(nextProps);\n  }\n  return React.createElement(TextInput, nextProps);\n});","map":{"version":3,"names":["React","TextInput","formatNumber","addSignPrefixAndSuffix","CurrencyInput","forwardRef","props","ref","renderTextInput","value","onChangeText","onChangeValue","separator","delimiter","_props$prefix","prefix","_props$suffix","suffix","_props$precision","precision","maxValue","minValue","_props$signPosition","signPosition","showPositiveSign","rest","_objectWithoutProperties","_excluded","_React$useState","useState","_React$useState2","_slicedToArray","startingWithSign","setStartingWithSign","noNegativeValues","noPositiveValues","formattedValue","useMemo","ignoreNegative","useEffect","handleChangeText","useCallback","text","textWithoutPrefix","replace","slice","textWithoutPrefixAndSufix","suffixRegex","RegExp","concat","test","sign","undefined","isNegativeValue","includes","textNumericValue","numberValue","Number","zerosOnValue","length","newValue","textInputValue","nextProps","_objectSpread","keyboardType","selection","start","Math","max","createElement"],"sources":["C:\\projetos\\app-repos-github\\node_modules\\react-native-currency-input\\lib\\module\\CurrencyInput.tsx"],"sourcesContent":["import * as React from 'react';\nimport { TextInput } from 'react-native';\n\nimport formatNumber, { addSignPrefixAndSuffix } from './utils/formatNumber';\nimport type { CurrencyInputProps } from './props';\n\nexport type CurrencyInput = TextInput;\n\nexport const CurrencyInput = React.forwardRef<TextInput, CurrencyInputProps>(function (\n  props,\n  ref\n) {\n  const {\n    renderTextInput,\n    value,\n    onChangeText,\n    onChangeValue,\n    separator,\n    delimiter,\n    prefix = '',\n    suffix = '',\n    precision = 2,\n    maxValue,\n    minValue,\n    signPosition = 'afterPrefix',\n    showPositiveSign,\n    ...rest\n  } = props;\n\n  const [startingWithSign, setStartingWithSign] = React.useState<'-' | '+'>();\n\n  const noNegativeValues = typeof minValue === 'number' && minValue >= 0;\n  const noPositiveValues = typeof maxValue === 'number' && maxValue <= 0;\n\n  const formattedValue = React.useMemo(() => {\n    if (!!value || value === 0 || value === -0) {\n      return formatNumber(value, {\n        separator,\n        prefix,\n        suffix,\n        precision,\n        delimiter,\n        ignoreNegative: noNegativeValues,\n        signPosition,\n        showPositiveSign,\n      });\n    } else {\n      return '';\n    }\n  }, [\n    value,\n    separator,\n    prefix,\n    suffix,\n    precision,\n    delimiter,\n    noNegativeValues,\n    signPosition,\n    showPositiveSign,\n  ]);\n\n  React.useEffect(() => {\n    onChangeText && onChangeText(formattedValue);\n  }, [formattedValue]); // eslint-disable-line react-hooks/exhaustive-deps\n\n  const handleChangeText = React.useCallback(\n    (text: string) => {\n      let textWithoutPrefix = text;\n\n      if (prefix) {\n        textWithoutPrefix = text.replace(prefix, '');\n        if (textWithoutPrefix === text) {\n          textWithoutPrefix = text.replace(prefix.slice(0, -1), '');\n        }\n      }\n\n      let textWithoutPrefixAndSufix = textWithoutPrefix;\n      if (suffix) {\n        const suffixRegex = new RegExp(`${suffix}([^${suffix}]*)$`);\n        textWithoutPrefixAndSufix = textWithoutPrefix.replace(suffixRegex, '');\n\n        if (textWithoutPrefixAndSufix === textWithoutPrefix) {\n          textWithoutPrefixAndSufix = textWithoutPrefix.replace(suffix.slice(1), '');\n        }\n      }\n\n      // Starting with a minus or plus sign\n      if (/^(-|-0)$/.test(text) && !noNegativeValues) {\n        setStartingWithSign('-');\n        onChangeText &&\n          onChangeText(\n            addSignPrefixAndSuffix(formattedValue, {\n              prefix,\n              suffix,\n              sign: '-',\n              signPosition,\n            })\n          );\n        return;\n      } else if (/^(\\+|\\+0)$/.test(text) && !noPositiveValues) {\n        setStartingWithSign('+');\n        onChangeText &&\n          onChangeText(\n            addSignPrefixAndSuffix(formattedValue, {\n              prefix,\n              suffix,\n              sign: '+',\n              signPosition,\n            })\n          );\n      } else {\n        setStartingWithSign(undefined);\n      }\n\n      const isNegativeValue = textWithoutPrefixAndSufix.includes('-');\n\n      const textNumericValue = textWithoutPrefixAndSufix.replace(/\\D+/g, '');\n\n      const numberValue = Number(textNumericValue) * (isNegativeValue ? -1 : 1);\n\n      const zerosOnValue = textNumericValue.replace(/[^0]/g, '').length;\n\n      let newValue: number | null;\n\n      if (!textNumericValue || (!numberValue && zerosOnValue === precision)) {\n        // Allow to clean the value instead of beign 0\n        newValue = null;\n      } else {\n        newValue = numberValue / 10 ** precision;\n      }\n\n      if (newValue && maxValue && newValue > maxValue) {\n        return;\n      } else if (newValue && minValue && newValue < minValue) {\n        return;\n      }\n\n      onChangeValue && onChangeValue(newValue);\n    },\n    [\n      suffix,\n      prefix,\n      noNegativeValues,\n      noPositiveValues,\n      precision,\n      maxValue,\n      minValue,\n      onChangeValue,\n      onChangeText,\n      formattedValue,\n      signPosition,\n    ]\n  );\n\n  const textInputValue = React.useMemo(() => {\n    return startingWithSign\n      ? addSignPrefixAndSuffix(formattedValue, {\n          prefix,\n          suffix,\n          sign: startingWithSign,\n          signPosition,\n        })\n      : formattedValue;\n  }, [formattedValue, prefix, signPosition, startingWithSign, suffix]);\n\n  const nextProps = React.useMemo(\n    () => ({\n      keyboardType: 'numeric' as const,\n      selection: suffix\n        ? { start: Math.max(textInputValue.length - suffix.length, 0) }\n        : props?.selection,\n      ...rest,\n      value: textInputValue,\n      onChangeText: handleChangeText,\n      ref: ref,\n    }),\n    [handleChangeText, props?.selection, ref, rest, suffix, textInputValue]\n  );\n\n  if (renderTextInput) {\n    return renderTextInput(nextProps);\n  }\n\n  return <TextInput {...nextProps} />;\n});\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}