{"ast":null,"code":"export var addSignPrefixAndSuffix = function addSignPrefixAndSuffix(value, options) {\n  var prefix = options.prefix,\n    sign = options.sign,\n    suffix = options.suffix,\n    signPosition = options.signPosition;\n  switch (signPosition) {\n    case 'beforePrefix':\n      return \"\".concat(sign).concat(prefix).concat(value).concat(suffix);\n    case 'afterPrefix':\n      return \"\".concat(prefix).concat(sign).concat(value).concat(suffix);\n  }\n};\nexport default (function (input, options) {\n  var _ref = options || {},\n    precision = _ref.precision,\n    _ref$separator = _ref.separator,\n    separator = _ref$separator === void 0 ? ',' : _ref$separator,\n    _ref$delimiter = _ref.delimiter,\n    delimiter = _ref$delimiter === void 0 ? '.' : _ref$delimiter,\n    _ref$prefix = _ref.prefix,\n    prefix = _ref$prefix === void 0 ? '' : _ref$prefix,\n    _ref$suffix = _ref.suffix,\n    suffix = _ref$suffix === void 0 ? '' : _ref$suffix,\n    ignoreNegative = _ref.ignoreNegative,\n    showPositiveSign = _ref.showPositiveSign,\n    _ref$signPosition = _ref.signPosition,\n    signPosition = _ref$signPosition === void 0 ? 'afterPrefix' : _ref$signPosition;\n  var negative = ignoreNegative ? false : input < 0;\n  var sign = negative ? '-' : showPositiveSign ? '+' : '';\n  var string = Math.abs(input).toFixed(precision);\n  var parts = string.split('.');\n  var buffer = [];\n  var number = parts[0];\n  while (number.length > 0) {\n    buffer.unshift(number.substr(Math.max(0, number.length - 3), 3));\n    number = number.substr(0, number.length - 3);\n  }\n  var formattedNumber = '';\n  formattedNumber = buffer.join(delimiter);\n  var decimals = parts[1];\n  if (!!precision && decimals) {\n    formattedNumber += separator + decimals;\n  }\n  return addSignPrefixAndSuffix(formattedNumber, {\n    prefix: prefix,\n    suffix: suffix,\n    sign: sign,\n    signPosition: signPosition\n  });\n});","map":{"version":3,"names":["addSignPrefixAndSuffix","value","options","prefix","sign","suffix","signPosition","concat","input","_ref","precision","_ref$separator","separator","_ref$delimiter","delimiter","_ref$prefix","_ref$suffix","ignoreNegative","showPositiveSign","_ref$signPosition","negative","string","Math","abs","toFixed","parts","split","buffer","number","length","unshift","substr","max","formattedNumber","join","decimals"],"sources":["C:\\projetos\\app-repos-github\\node_modules\\react-native-currency-input\\lib\\module\\utils\\formatNumber.ts"],"sourcesContent":["import type { FormatNumberOptions } from '../props';\n\ninterface AddSignPrefixAndSuffixProps {\n  sign?: '+' | '-' | '';\n  prefix?: string;\n  suffix?: string;\n  signPosition: 'beforePrefix' | 'afterPrefix';\n}\n\nexport const addSignPrefixAndSuffix = (\n  value: any,\n  options: AddSignPrefixAndSuffixProps\n) => {\n  const { prefix, sign, suffix, signPosition } = options;\n\n  switch (signPosition) {\n    case 'beforePrefix':\n      return `${sign}${prefix}${value}${suffix}`;\n    case 'afterPrefix':\n      return `${prefix}${sign}${value}${suffix}`;\n  }\n};\n\nexport default (input: number, options?: FormatNumberOptions) => {\n  const {\n    precision,\n    separator = ',',\n    delimiter = '.',\n    prefix = '',\n    suffix = '',\n    ignoreNegative,\n    showPositiveSign,\n    signPosition = 'afterPrefix',\n  } = options || {};\n\n  const negative = ignoreNegative ? false : input < 0;\n  const sign = negative ? '-' : showPositiveSign ? '+' : '';\n\n  const string = Math.abs(input).toFixed(precision);\n\n  const parts = string.split('.');\n  const buffer = [];\n\n  let number = parts[0];\n  while (number.length > 0) {\n    buffer.unshift(number.substr(Math.max(0, number.length - 3), 3));\n    number = number.substr(0, number.length - 3);\n  }\n\n  let formattedNumber = '';\n  formattedNumber = buffer.join(delimiter);\n\n  const decimals = parts[1];\n  if (!!precision && decimals) {\n    formattedNumber += separator + decimals;\n  }\n\n  return addSignPrefixAndSuffix(formattedNumber, {\n    prefix,\n    suffix,\n    sign,\n    signPosition,\n  });\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}